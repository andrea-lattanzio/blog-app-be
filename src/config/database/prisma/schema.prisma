generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  Local
  Google
}

/**
 * User model
 */
model User {
  id           String       @id @default(uuid())
  name         String
  lastname     String
  username     String       @unique
  email        String       @unique
  password     String?
  authProvider AuthProvider
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Article      Article[]
  Comment      Comment[]
}

/**
 * Article model with a one-to-many relationship with Chapter
 */
model Article {
  id          String    @id @default(uuid())
  title       String
  description String
  tag         String
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  comments    Comment[]
  likes       Int       @default(0)
}

/**
 * Chapter model with a one-to-many relationship with Paragraph
 */
model Chapter {
  id         String      @id @default(uuid())
  title      String
  paragraphs Paragraph[]
  articleId  String
  article    Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

/**
 * Paragraph model with a one-to-many relationship with CodeSection
 */
model Paragraph {
  id           String        @id @default(uuid())
  text         String
  chapterId    String
  chapter      Chapter       @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  codeSections CodeSection[] // One-to-many relationship with CodeSection
}

/**
 * CodeSection model with a many-to-one relationship with Paragraph
 */
model CodeSection {
  id          String    @id @default(uuid())
  language    String
  code        String
  caption     String?
  paragraphId String
  paragraph   Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
}

/**
 * Comment model with:
 * one-to-many relationship with Comment for handling comment replies
 * many-to-one relationship with Article (parent article)
 * many-to-one relationship with User (poster of the comment)
 */
model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article   Article? @relation(fields: [articleID], references: [id], onDelete: Cascade)
  articleID String?

  author User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  replies  Comment[] @relation("CommentReplies")
}

/**
 * Newsletter subscribers table:
 * stores the email addresses to send the emails to
 */
model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  is_active Boolean  @default(true)
}

/**
 * Password reset table to keep track of password changes
 */
model PasswordResetLog {
  id        String   @id @default(uuid())
  email     String
  token     String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
